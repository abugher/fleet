#!/bin/bash
# generate - Generate SSL key and certificate material for one host, signed by my CA.
# generate <shorthostname> [shorthostname ...]
#
# Much of this logic could be a make file.  Maybe it should be.


source common.sh || {
  echo 'Error:  Current directory looks wrong.  Exiting.' >&2
  exit 1
}


ca_only='no'
if test $# -lt 1; then
  #fail $ERR_USAGE "Specify any positive number of short hostnames, starting with the most canonical."
  ca_only='yes'
fi

if test 'ca' = "${host}"; then
  fail $ERR_USAGE "'ca' may not be a primary hostname."
fi


# sanity check

for prereq in ca_root_conf_template ca_intermediate_conf_template host_conf_template; do
  if ! test -e "${!prereq}"; then
    fail $ERR_PREREQ "Required file does not exist:  ${!prereq}"
  fi
done


# CA root material

if ! test -e "${ca_root_dir}"; then
  mkdir -p "${ca_root_dir}" \
  || fail $ERR_MKDIR "Failed to create directory:  ${ca_root_dir}"
  inform "Created directory:  ${ca_root_dir}"
else
  inform "Directory exists:  ${ca_root_dir}"
fi

if ! test -e "${ca_root_newcerts}"; then
  mkdir -p "${ca_root_newcerts}" \
  || fail $ERR_MKDIR "Failed to create directory:  ${ca_root_newcerts}"
  inform "Created directory:  ${ca_root_newcerts}"
else
  inform "Directory exists:  ${ca_root_newcerts}"
fi

if ! test -e "${ca_root_sensitive_dir}"; then
  mkdir -p "${ca_root_sensitive_dir}" \
  || fail $ERR_MKDIR "Failed to create directory:  ${ca_root_sensitive_dir}"
  inform "Created directory:  ${ca_root_sensitive_dir}"
else
  inform "Directory exists:  ${ca_root_sensitive_dir}"
fi

if newer_than_deps "${ca_root_conf_template}" "${depend_on_ca_root_conf_template[@]}"; then
  remove_stale "${depend_on_ca_root_conf_template[@]}"
fi

if ! test -e "${ca_root_conf}"; then
  cp "${ca_root_conf_template}" "${ca_root_conf}" \
  || fail $ERR_CONF "Failed to create conf:  ${ca_root_conf}"

  sed -i 's/DOMAIN/'${domain}'/' "${ca_root_conf}" \
  || fail $ERR_CONF "Failed to inject domain name:  ${domain}"
  inform "Injected domain name:  ${1}"
else
  inform "Conf exists:  ${ca_root_conf}"
fi

if newer_than_deps "${ca_root_conf}" "${depend_on_ca_root_conf[@]}"; then
  remove_stale "${depend_on_ca_root_conf[@]}"
fi

if ! test -e "${ca_root_key}"; then
  rm -f "${ca_root_dir}/index.txt"{,.attr} \
  || fail $ERR_GENRSA "Failed to remove stale index files."
  touch "${ca_root_dir}/index.txt"{,.attr} \
  || fail $ERR_GENRSA "Failed to create index files."
  echo 1000 > "${ca_root_dir}/serial" \
  || fail $ERR_GENRSA "Failed to create 'serial'."
  rm -f "${ca_root_dir}/serial.old" \
  || fail $ERR_GENRSA "Failed to remove stale 'serial.old'."
  echo 1000 > "${ca_root_dir}/crlnumber" \
  || fail $ERR_GENRSA "Failed to create 'crlnumber'."

  openssl genrsa -aes256 -out "${ca_root_key}" 4096 \
  || fail $ERR_GENRSA "Failed to generate CA root key:  ${ca_root_key}"
  inform "Generated key:  ${ca_root_key}"
else
  inform "Key exists:  ${ca_root_key}"
fi

if newer_than_deps "${ca_root_key}" "${depend_on_ca_root_key[@]}"; then
  remove_stale "${depend_on_ca_root_key[@]}"
fi

if ! test -e "${ca_root_cert}"; then
  openssl req -config "${ca_root_conf}" -key "${ca_root_key}" -new -x509 -days $(( 365 * 10 )) -sha256 -extensions v3_ca -out "${ca_root_cert}" \
  || fail $ERR_CERT "Failed to generate certificate:  ${ca_root_cert}"
  inform "Generated certificate:  ${ca_root_cert}"
else
  inform "Certificate exists:  ${ca_root_cert}"
fi

if newer_than_deps "${ca_root_cert}" "${depend_on_ca_root_cert[@]}"; then
  remove_stale "${depend_on_ca_root_cert[@]}"
fi

if ! test -e "${ca_root_crl}"; then
  openssl ca -config "${ca_root_conf}" -gencrl -out "${ca_root_crl}" \
  || fail $ERR_CERT "Failed to generate revocation list:  ${ca_root_crl}"
  inform "Generated revocation list:  ${ca_root_crl}"
else
  inform "Revocation list exists:  ${ca_root_crl}"
fi

if newer_than_deps "${ca_root_crl}" "${depend_on_ca_root_crl[@]}"; then
  remove_stale "${depend_on_ca_root_crl[@]}"
fi

if ! test -e "${ca_root_crl_der}"; then
  openssl crl -in  "${ca_root_crl}" -outform der -out "${ca_root_crl_der}" \
  || fail $ERR_CERT "Failed to generate DER encoded revocation list:  ${ca_root_crl_der}"
  inform "Generated DER encoded revocation list:  ${ca_root_crl_der}"
else
  inform "DER encoded revocation list exists:  ${ca_root_crl_der}"
fi

if newer_than_deps "${ca_root_crl_der}" "${depend_on_ca_root_crl_der[@]}"; then
  remove_stale "${depend_on_ca_root_crl_der[@]}"
fi


# CA intermediate material

if ! test -e "${ca_intermediate_dir}"; then
  mkdir -p "${ca_intermediate_dir}" \
  || fail $ERR_MKDIR "Failed to create directory:  ${ca_intermediate_dir}"
  inform "Created directory:  ${ca_intermediate_dir}"
else
  inform "Directory exists:  ${ca_intermediate_dir}"
fi

if ! test -e "${ca_intermediate_newcerts}"; then
  mkdir -p "${ca_intermediate_newcerts}" \
  || fail $ERR_MKDIR "Failed to create directory:  ${ca_intermediate_newcerts}"
  inform "Created directory:  ${ca_intermediate_newcerts}"
else
  inform "Directory exists:  ${ca_intermediate_newcerts}"
fi

if ! test -e "${ca_intermediate_sensitive_dir}"; then
  mkdir -p "${ca_intermediate_sensitive_dir}" \
  || fail $ERR_MKDIR "Failed to create directory:  ${ca_intermediate_sensitive_dir}"
  inform "Created directory:  ${ca_intermediate_sensitive_dir}"
else
  inform "Directory exists:  ${ca_intermediate_sensitive_dir}"
fi

if newer_than_deps "${ca_intermediate_conf_template}" "${depend_on_ca_intermediate_conf_template[@]}"; then
  remove_stale "${depend_on_ca_intermediate_conf_template[@]}"
fi

if ! test -e "${ca_intermediate_conf}"; then
  cp "${ca_intermediate_conf_template}" "${ca_intermediate_conf}" \
  || fail $ERR_CONF "Failed to create conf:  ${ca_intermediate_conf}"

  sed -i 's/DOMAIN/'${domain}'/' "${ca_intermediate_conf}" \
  || fail $ERR_CONF "Failed to inject domain name:  ${domain}"
  inform "Injected domain name:  ${1}"
else
  inform "Conf exists:  ${ca_intermediate_conf}"
fi

if newer_than_deps "${ca_intermediate_conf}" "${depend_on_ca_intermediate_conf[@]}"; then
  remove_stale "${depend_on_ca_intermediate_conf[@]}"
fi

if ! test -e "${ca_intermediate_key}"; then
  rm -f "${ca_intermediate_dir}/index.txt"{,.attr} \
  || fail $ERR_GENRSA "Failed to remove stale index files."
  touch "${ca_intermediate_dir}/index.txt"{,.attr} \
  || fail $ERR_GENRSA "Failed to create index files."
  echo 1000 > "${ca_intermediate_dir}/serial" \
  || fail $ERR_GENRSA "Failed to create 'serial'."
  rm -f "${ca_intermediate_dir}/serial.old" \
  || fail $ERR_GENRSA "Failed to remove stale 'serial.old'."
  echo 1000 > "${ca_intermediate_dir}/crlnumber" \
  || fail $ERR_GENRSA "Failed to create 'crlnumber'."
  openssl genrsa -aes256 -out "${ca_intermediate_key}" 4096 \
  || fail $ERR_GENRSA "Failed to generate CA intermediate key:  ${ca_intermediate_key}"
  inform "Generated key:  ${ca_intermediate_key}"
  remove_stale "${depend_on_ca_intermediate_key[@]}"
else
  inform "Key exists:  ${ca_intermediate_key}"
fi

if ! test -e "${ca_intermediate_csr}"; then
  openssl req -config "${ca_intermediate_conf}" -new -sha256 -key "${ca_intermediate_key}" -out "${ca_intermediate_csr}" \
  || fail $ERR_CSR "Failed to generate CSR:  ${ca_intermediate_csr}"
  inform "Generated CSR:  ${ca_intermediate_csr}"
  remove_stale "${depend_on_ca_intermediate_csr[@]}"
else
  inform "CSR exists:  ${ca_intermediate_csr}"
fi

if ! test -e "${ca_intermediate_cert}"; then
  openssl ca -config "${ca_root_conf}" -extensions v3_intermediate_ca -days $(( 365 * 10 )) -notext -md sha256 -in "${ca_intermediate_csr}" -out "${ca_intermediate_cert}" \
  || fail $ERR_CERT "Failed to generate certificate:  ${ca_intermediate_cert}"
  inform "Generated certificate:  ${ca_intermediate_cert}"
  remove_stale "${depend_on_ca_intermediate_cert[@]}"
else
  inform "Certificate exists:  ${ca_intermediate_cert}"
fi

if ! test -e "${ca_intermediate_crl}"; then
  openssl ca -config "${ca_intermediate_conf}" -gencrl -out "${ca_intermediate_crl}" \
  || fail $ERR_CERT "Failed to generate revocation list:  ${ca_intermediate_crl}"
  inform "Generated revocation list:  ${ca_intermediate_crl}"
  remove_stale "${depend_on_ca_intermediate_crl[@]}"
else
  inform "Revocation list exists:  ${ca_intermediate_crl}"
fi

if ! test -e "${ca_intermediate_crl_der}"; then
  openssl crl -in  "${ca_intermediate_crl}" -outform der -out "${ca_intermediate_crl_der}" \
  || fail $ERR_CERT "Failed to generate DER encoded revocation list:  ${ca_intermediate_crl_der}"
  inform "Generated DER encoded revocation list:  ${ca_intermediate_crl_der}"
  remove_stale "${depend_on_ca_intermediate_crl_der[@]}"
else
  inform "DER encoded revocation list exists:  ${ca_intermediate_crl}"
fi


# host material

if ! test 'yes' = "${ca_only}"; then
  if ! test -e "${host_dir}"; then
    mkdir -p "${host_dir}" \
    || fail $ERR_MKDIR "Failed to create directory:  ${host_dir}"
    inform "Created directory:  ${host_dir}"
  else
    inform "Directory exists:  ${host_dir}"
  fi

  if ! test -e "${sensitive_host_dir}"; then
    mkdir -p "${sensitive_host_dir}" \
    || fail $ERR_MKDIR "Failed to create directory:  ${sensitive_host_dir}"
    inform "Created directory:  ${sensitive_host_dir}"
  else
    inform "Directory exists:  ${sensitive_host_dir}"
  fi

  if newer_than_deps "${host_conf_template}" "${depend_on_host_conf_template[@]}"; then
    remove_stale "${depend_on_host_conf_template[@]}"
  fi

  if ! test -e "${host_conf}"; then
    cp "${host_conf_template}" "${host_conf}" \
    || fail $ERR_CONF "Failed to create conf:  ${host_conf}"

    sed -i 's/DOMAIN/'${domain}'/' "${host_conf}" \
    || fail $ERR_CONF "Failed to inject domain name:  ${domain}"
    inform "Injected domain name:  ${1}"

    sed -i 's/COMMONNAME/'${1}'/' "${host_conf}" \
    || fail $ERR_CONF "Failed to inject common name:  ${1}"
    inform "Injected common name:  ${1}"

    n=1
    for shortname in "${@}"; do
      if echo "${shortname}" | grep -q '\.'; then
        fail $ERR_CONF "No dots in short names."
      fi
      echo -e "DNS.${n}                   = ${shortname}.${domain}" \
      >> "${host_conf}" \
      || fail $ERR_CONF "Failed to append configuration for short name:  ${shortname}"
      inform "Appended short name:  ${shortname}"
      let n++
      if echo "${shortname}" | grep -q '^dmz$'; then
        echo -e "DNS.${n}                   = ${domain}" \
        >> "${host_conf}" \
        || fail $ERR_CONF "Failed to append configuration for root domain name:  ${domain}"
        inform "Appended root domain name:  ${domain}"
        let n++
      fi
    done
    inform "Created conf:  ${host_conf}"
    remove_stale "${depend_on_host_conf[@]}"
  else
    inform "Conf exists:  ${host_conf}"
  fi

  if ! test -e "${host_key}"; then
    openssl genrsa -out "${host_key}" 4096 \
    || fail $ERR_GENRSA "Failed to generate host key:  ${host_key}"
    inform "Generated host key:  ${host_key}"
    remove_stale "${depend_on_host_key[@]}"
  else
    inform "Key exists:  ${host_key}"
  fi

  if ! test -e "${host_csr}"; then
    openssl req -config "${host_conf}" -key "${host_key}" -new -sha256 -out "${host_csr}" \
    || fail $ERR_CSR "Failed to generate CSR:  ${host_csr}"
    inform "Generated CSR:  ${host_csr}"
    remove_stale "${depend_on_host_csr[@]}"
  else
    inform "CSR exists:  ${host_csr}"
  fi

  if ! test -e "${host_cert}"; then
    openssl ca -config "${host_conf}" -extensions v3_req -days $(( 365 * 10 )) -notext -md sha256 -in "${host_csr}" -out "${host_cert}" \
    || fail $ERR_CERT "Failed to generate certificate:  ${host_cert}"
    inform "Generated certificate:  ${host_cert}"
    remove_stale "${depend_on_host_cert[@]}"
  else
    inform "Certificate exists:  ${host_cert}"
  fi

  if ! test -e "${cert_chain}"; then
    cat "${host_cert}" "${ca_intermediate_cert}" "${ca_root_cert}" > "${cert_chain}" \
    || fail $ERR_CHAIN "Failed to create certificate chain:  ${cert_chain}"
    inform "Created certificate chain:  ${cert_chain}"
    remove_stale "${depend_on_cert_chain[@]}"
  else
    inform "Certificate chain exists:  ${cert_chain}"
  fi

  if ! test -e "${host_crl}"; then
    openssl ca -config "${host_conf}" -gencrl -out "${host_crl}" \
    || fail $ERR_CERT "Failed to generate revocation list:  ${host_crl}"
    inform "Generated revocation list:  ${host_crl}"
    remove_stale "${depend_on_host_crl[@]}"
  else
    inform "Revocation list exists:  ${host_crl}"
  fi

  if ! test -e "${host_crl_der}"; then
    openssl crl -in  "${host_crl}" -outform der -out "${host_crl_der}" \
    || fail $ERR_CERT "Failed to generate DER encoded revocation list:  ${ca_host_crl_der}"
    inform "Generated DER encoded revocation list:  ${host_crl_der}"
    remove_stale "${depend_on_host_crl_der[@]}"
  else
    inform "DER encoded revocation list exists:  ${host_crl}"
  fi
fi
