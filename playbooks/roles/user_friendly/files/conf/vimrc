" Comments start with a double quote.
" Remember:
"   :help foo

" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
"syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" Aaron's additions are below.

set             nocompatible
set             nomodeline
set             backspace=indent,eol,start
set             ruler
set             mouse=
syntax          on
colorscheme     desert
set             background=dark
set             foldmethod=indent
set             spellfile=$HOME/.dictionary.utf-8.add


" Tabs
"
"   1 and 2 set the width considered to be a "tab" to eight spaces.
"   3 sets indentation to two spaces.
"   4 makes sure all tabs are entered as spaces.
"   5 basically enables context awareness when hitting the tab key.  It causes
"   tabs entered at the beginning of a line to be shiftwidth wide, for example.
"
set             tabstop=8           " 1
set             softtabstop=8       " 2
set             shiftwidth=2        " 3
set             expandtab           " 4
set             smarttab            " 5

" nosmartindent + autoindent does the dumb autoindenting I like.  Generally,
" hitting enter yields a new line at the same indentation level as the previous
" line, and it doesn't screw up #comments, which is my biggest sore point.
"
" You might want to set smartindent for lists with leading dashes.
set             autoindent
set             nosmartindent
set             nocindent


" Load autocommands only once.
if !exists("autocommands_loaded")
  let autocommands_loaded = 1

  " Set width to 72 only if file ends in .txt.
  au BufWinEnter           *.txt   setlocal textwidth=72
  au BufWinEnter           *.txt   setlocal spell

  " Remember a "view" per-file.  This preserves folds, and presumably other
  " things.  
  au BufWinLeave        ?*      mkview
  au BufWinEnter        ?*      loadview

  " This awful mess should put the cursor at the last position per-file:
  function! ResCur()
    if line("'\"") <= line("$")
      normal! g`"
      return 1
    endif
  endfunction

  augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
  augroup END

  " Syntax highlighting should take the whole file into account, not break
  " when I fold a hundred lines.
  autocmd BufEnter * :syntax sync fromstart
endif

let b:is_bash=1
